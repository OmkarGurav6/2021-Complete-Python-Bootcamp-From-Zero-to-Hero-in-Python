
Decorators can be thought of as functions which modify the functionality of another function. They help to make your code shorter and more "Pythonic".

In Python everything is an object. That means functions are objects which can be assigned labels and passed into other functions.

def new_decorator(func):

    def wrap_func():
        print("Code would be here, before executing the func")

        func()

        print("Code here will execute after the func()")

    return wrap_func

def func_needs_decorator():
    print("This function is in need of a Decorator")


func_needs_decorator()

This function is in need of a Decorator

# Reassign func_needs_decorator
func_needs_decorator = new_decorator(func_needs_decorator)

func_needs_decorator()
Code would be here, before executing the func
This function is in need of a Decorator
Code here will execute after the func()

A decorator simply wrapped the function and modified its behavior.

we can rewrite this code using the @ symbol, which is what Python uses for Decorators.

@new_decorator
def func_needs_decorator():
    print("This function is in need of a Decorator")

func_needs_decorator()
Code would be here, before executing the func
This function is in need of a Decorator
Code here will execute after the func()

Decorators are used lot in Python for Web Development, such as Flask or Django.

Decorators allow us to wrap another function in order to extend the behavior of the wrapped function, without permanently modifying it.

module = your fingers
library = your hands
framework = your body


