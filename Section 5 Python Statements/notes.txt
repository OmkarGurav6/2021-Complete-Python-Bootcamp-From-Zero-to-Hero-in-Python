
: acts as { in python.

syntax format for if statements

if case1:
    perform action1
elif case2:
    perform action2
else: 
    perform action3


general format for a for loop

for item in object:
    statements to do stuff


Tuples have a special quality when it comes to for loops. If you are iterating through a sequence that contains tuples,
the item can actually be the tuple itself, this is an example of tuple unpacking. 
During the for loop we will be unpacking the tuple inside of a sequence and we can access the individual items inside that tuple!

eg : for (t1,t2) in list2:
         print(t1)

d = {'k1':1,'k2':2,'k3':3}
for item in d:
    print(item)

k1
k2
k3

This produces only the keys.


# Dictionary unpacking
for k,v in d.items():
    print(k)
    print(v)
k1
1
k2
2
k3
3


The general format of a while loop is:

while test:
    code statements
else:
    final code statements


break: Breaks out of the current closest enclosing loop.
continue: Goes to the top of the closest enclosing loop.
pass: Does nothing at all.

The range function allows you to quickly generate a list of integers.
There are 3 parameters you can pass, a start, a stop, and a step size.

# Notice how 11 is not included, up to but not including 11, just like slice notation!
list(range(0,11))
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

Keeping track of how many loops you've gone through is so common, 
that enumerate was created so you don't need to worry about creating and updating this index_count or loop_count variable

# Notice the tuple unpacking!

for i,letter in enumerate('abcde'):
    print("At index {} the letter is {}".format(i,letter))
At index 0 the letter is a
At index 1 the letter is b
At index 2 the letter is c
At index 3 the letter is d
At index 4 the letter is e

You can use the zip() function to quickly create a list of tuples by "zipping" up together two lists.
mylist1 = [1,2,3,4,5]
mylist2 = ['a','b','c','d','e']
list(zip(mylist1,mylist2))
[(1, 'a'), (2, 'b'), (3, 'c'), (4, 'd'), (5, 'e')]

This one is also a generator.

For entering input, use input().
Input always accepts anything that is passed into as a string. so we have to convert it into type we want. 

List comprehensions allow us to build out lists using a different notation. 
You can think of it as essentially a one line for loop built inside of brackets

lst = [x for x in 'word']
lst
['w', 'o', 'r', 'd']


