
Class syntax :

# Create a new object type called Sample
class Sample:
    pass

# Instance of Sample
x = Sample()

print(type(x))
<class '__main__.Sample'>

An attribute is a characteristic of an object.

The syntax for creating an attribute is:
self.attribute = something

There is a special method called:
__init__()
It has two underscores on each side, not one.
This method is used to initialize the attributes of an object.
This method is like constructor from C++. 
The special method __init__() is called automatically right after the object has been created.

eg : class Dog:
        def __init__(self,breed):
            self.breed = breed
        
     sam = Dog(breed='Lab')
     frank = Dog(breed='Huskie')

Each attribute in a class definition begins with a reference to the instance object. 
It is by convention named self. The breed is the argument. 
The value is passed during the class instantiation.

In Python there are also class object attributes. 
These Class Object Attributes are the same for any instance of the class.

eg : class Dog:

        # Class Object Attribute
        species = 'mammal'
      
        def __init__(self,breed):
            self.breed = breed
        
     sam = Dog(breed='Lab')
     sam.species
     'mammal'

Every Python class keeps following built-in attributes and they can be accessed using dot operator like any other attribute −

__dict__ − Dictionary containing the class's namespace.

__doc__ − Class documentation string or none, if undefined.

__name__ − Class name.

__module__ − Module name in which the class is defined. This attribute is "__main__" in interactive mode.

__bases__ − A possibly empty tuple containing the base classes, in the order of their occurrence in the base class list.

Methods are used to perform operations with the attributes of our objects.

Think of methods as functions acting on an Object that 
take the Object itself into account through its self argument.

class Circle:
    pi = 3.14

    # Circle gets instantiated with a radius (default is 1)
    def __init__(self, radius=1):
        self.radius = radius 
        self.area = radius * radius * self.pi

    # Method for getting Circumference
    def getCircumference(self):
        return self.radius * self.pi * 2


c = Circle()

print('Radius is: ',c.radius)
print('Area is: ',c.area)
print('Circumference is: ',c.getCircumference())

Here we can use either Circle.pi or self.pi.

In Python, polymorphism refers to the way in which different object classes can share the same method name,
and those methods can be called from the same place even though a variety of different objects might be passed in. 

A more common practice is to use abstract classes and inheritance. An abstract class is one that never expects to be instantiated.

Real life examples of polymorphism include:

opening different file types - different tools are needed to display Word, pdf and Excel files
adding different objects - the + operator performs arithmetic and concatenation

Dunder or magic methods in Python are the methods having two prefix and suffix underscores in the method name. 
Dunder here means “Double Under (Underscores)”. These are commonly used for operator overloading.

__str__(), __len__() and __del__() methods
They allow us to use Python specific functions on objects created through our class.

Another useful magic method is __str__(). It is overridden to return a printable string representation of any user defined class.

You need to name attributes with a double underscore prefix, and those attributes then are not be directly visible to outsiders.

You can access such attributes as object._className__attrName.









